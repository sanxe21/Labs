#include <iostream>
#include <cstdlib> // Для rand()
#include <ctime>   // Для time()

class Matrix {
private:
    int rows, cols;
    double** data; // массив для хранения матрицы

    void allocateMemory() { // функция выделения памяти
        data = new double* [rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new double[cols];
        }
    }

    void deallocateMemory() { // функция освобождения памяти
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

public:
    Matrix(int r, int c) : rows(r), cols(c) { // конструктор
        if (r <= 0 || c <= 0) {
            std::cerr << "Предупреждение: размеры матрицы должны быть положительными. Установлены значения по умолчанию (1x1).\n";
            rows = 1;
            cols = 1;
        }
        allocateMemory();
        static bool seeded = false;
        if (!seeded) {
            srand(static_cast<unsigned>(time(0)));
            seeded = true;
        }
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                data[i][j] = rand() % 100; // Случайное число от 0 до 99
            }
        }
    }

    ~Matrix() { // деструктор
        deallocateMemory();
    }

    Matrix(const Matrix& other) : rows(other.rows), cols(other.cols) { // конструктор копирования
        allocateMemory();
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                data[i][j] = other.data[i][j];
            }
        }
    }

    Matrix& operator=(const Matrix& other) { // перегрузка оператора присваивания
        if (this != &other) {
            deallocateMemory();
            rows = other.rows;
            cols = other.cols;
            allocateMemory();
            for (int i = 0; i < rows; ++i) {
                for (int j = 0; j < cols; ++j) {
                    data[i][j] = other.data[i][j];
                }
            }
        }
        return *this;
    }

    void setElement(int i, int j, double value) { // метод для установки элемента
        if (i >= 0 && i < rows && j >= 0 && j < cols) {
            data[i][j] = value;
        }
        else {
            std::cerr << "Предупреждение: индексы вне диапазона матрицы. Элемент не изменён.\n";
        }
    }

    void display() const { // вывод матрицы на экран
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }

    Matrix getMinor(int rowToRemove, int colToRemove) const { // вывод минора
        if (rowToRemove < 0 || rowToRemove >= rows || colToRemove < 0 || colToRemove >= cols) {
            std::cerr << "Предупреждение: недопустимые индексы для минора. Возвращена матрица 1x1.\n";
            Matrix emptyMinor(1, 1);
            return emptyMinor;
        }
        Matrix minor(rows - 1, cols - 1);
        int minorRow = 0, minorCol = 0;
        for (int i = 0; i < rows; ++i) {
            if (i == rowToRemove) continue;
            minorCol = 0;
            for (int j = 0; j < cols; ++j) {
                if (j == colToRemove) continue;
                minor.data[minorRow][minorCol] = data[i][j];
                minorCol++;
            }
            minorRow++;
        }
        return minor;
    }

    void setMinor(int rowToRemove, int colToRemove, const Matrix& minor) { // изменение минора
        if (minor.rows != rows - 1 || minor.cols != cols - 1) {
            std::cerr << "Предупреждение: размер минора не соответствует. Матрица не изменена.\n";
            return;
        }
        int minorRow = 0, minorCol = 0;
        for (int i = 0; i < rows; ++i) {
            if (i == rowToRemove) continue;
            minorCol = 0;
            for (int j = 0; j < cols; ++j) {
                if (j == colToRemove) continue;
                data[i][j] = minor.data[minorRow][minorCol];
                minorCol++;
            }
            minorRow++;
        }
    }

    Matrix operator+(const Matrix& other) const { // перегрузка оператора сложения
        if (rows != other.rows || cols != other.cols) {
            std::cerr << "Предупреждение: размеры матриц не совпадают. Возвращена матрица 1x1.\n";
            Matrix emptyResult(1, 1);
            return emptyResult;
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    Matrix operator-(const Matrix& other) const { // перегрузка оператора вычитания
        if (rows != other.rows || cols != other.cols) {
            std::cerr << "Предупреждение: размеры матриц не совпадают. Возвращена матрица 1x1.\n";
            Matrix emptyResult(1, 1);
            return emptyResult;
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    Matrix operator*(const Matrix& other) const { // перегрузка оператора умножения
        if (cols != other.rows) {
            std::cerr << "Предупреждение: нельзя умножить матрицы из-за неподходящих размеров. Возвращена матрица 1x1.\n";
            Matrix emptyResult(1, 1);
            return emptyResult;
        }
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                double sum = 0;
                for (int k = 0; k < cols; ++k) {
                    sum += data[i][k] * other.data[k][j];
                }
                result.data[i][j] = sum;
            }
        }
        return result;
    }

    // Геттеры для доступа к rows и cols
    int getRows() const { return rows; }
    int getCols() const { return cols; }
};

// Интерактивное меню с switch-case
int main() {
    setlocale(LC_ALL, "RUS");
    int rows, cols;
    std::cout << "Введите количество строк матрицы: ";
    std::cin >> rows;
    std::cout << "Введите количество столбцов матрицы: ";
    std::cin >> cols;

    Matrix mat(rows, cols); // Ошибки обрабатываются внутри конструктора
    int choice;

    do {
        std::cout << "\nМеню:\n";
        std::cout << "1. Установить элемент матрицы\n";
        std::cout << "2. Вывести матрицу\n";
        std::cout << "3. Вывести минор\n";
        std::cout << "4. Изменить минор\n";
        std::cout << "5. Сложить два минора\n";
        std::cout << "6. Вычесть два минора\n";
        std::cout << "7. Умножить два минора\n";
        std::cout << "0. Выход\n";
        std::cout << "Выберите действие: ";

        // Очистка ошибочного состояния cin
        if (!(std::cin >> choice)) {
            std::cin.clear(); // Очистка флага ошибки
            std::cin.ignore(10000, '\n'); // Пропуск некорректного ввода
            std::cout << "Ошибка ввода. Введите число.\n";
            continue;
        }

        switch (choice) {
        case 1: {
            int i, j;
            double value;
            std::cout << "Введите индекс строки (0-" << mat.getRows() - 1 << "): ";
            if (!(std::cin >> i)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите индекс столбца (0-" << mat.getCols() - 1 << "): ";
            if (!(std::cin >> j)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите значение: ";
            if (!(std::cin >> value)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            mat.setElement(i, j, value);
            std::cout << "Элемент установлен (или проигнорирован при ошибке).\n";
            break;
        }
        case 2: {
            std::cout << "Матрица:\n";
            mat.display();
            break;
        }
        case 3: {
            int row, col;
            std::cout << "Введите строку для исключения (0-" << mat.getRows() - 1 << "): ";
            if (!(std::cin >> row)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите столбец для исключения (0-" << mat.getCols() - 1 << "): ";
            if (!(std::cin >> col)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Минор:\n";
            mat.getMinor(row, col).display();
            break;
        }
        case 4: {
            int row, col;
            std::cout << "Введите строку для исключения (0-" << mat.getRows() - 1 << "): ";
            if (!(std::cin >> row)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите столбец для исключения (0-" << mat.getCols() - 1 << "): ";
            if (!(std::cin >> col)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            Matrix minor(mat.getRows() - 1, mat.getCols() - 1);
            std::cout << "Минор заполнен случайными числами.\n";
            mat.setMinor(row, col, minor);
            std::cout << "Минор изменён (или проигнорирован при ошибке).\n";
            break;
        }
        case 5: {
            int row1, col1, row2, col2;
            std::cout << "Введите строку и столбец для первого минора: ";
            if (!(std::cin >> row1 >> col1)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите строку и столбец для второго минора: ";
            if (!(std::cin >> row2 >> col2)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            Matrix minor1 = mat.getMinor(row1, col1);
            Matrix minor2 = mat.getMinor(row2, col2);
            if (minor1.getRows() != minor2.getRows() || minor1.getCols() != minor2.getCols()) {
                std::cout << "Нельзя сложить миноры: размеры не совпадают.\n";
                break;
            }
            std::cout << "Результат сложения миноров:\n";
            (minor1 + minor2).display();
            break;
        }
        case 6: {
            int row1, col1, row2, col2;
            std::cout << "Введите строку и столбец для первого минора: ";
            if (!(std::cin >> row1 >> col1)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите строку и столбец для второго минора: ";
            if (!(std::cin >> row2 >> col2)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            Matrix minor1 = mat.getMinor(row1, col1);
            Matrix minor2 = mat.getMinor(row2, col2);
            if (minor1.getRows() != minor2.getRows() || minor1.getCols() != minor2.getCols()) {
                std::cout << "Нельзя вычесть миноры: размеры не совпадают.\n";
                break;
            }
            std::cout << "Результат вычитания миноров:\n";
            (minor1 - minor2).display();
            break;
        }
        case 7: {
            int row1, col1, row2, col2;
            std::cout << "Введите строку и столбец для первого минора: ";
            if (!(std::cin >> row1 >> col1)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            std::cout << "Введите строку и столбец для второго минора: ";
            if (!(std::cin >> row2 >> col2)) {
                std::cin.clear();
                std::cin.ignore(10000, '\n');
                std::cout << "Ошибка ввода. Действие отменено.\n";
                break;
            }
            Matrix minor1 = mat.getMinor(row1, col1);
            Matrix minor2 = mat.getMinor(row2, col2);
            if (minor1.getCols() != minor2.getRows()) {
                std::cout << "Нельзя умножить миноры: неподходящие размеры.\n";
                break;
            }
            std::cout << "Результат умножения миноров:\n";
            (minor1 * minor2).display();
            break;
        }
        case 0:
            std::cout << "Выход из программы.\n";
            break;
        default:
            std::cout << "Неверный выбор. Попробуйте снова.\n";
            break;
        }
    } while (choice != 0);

    return 0;
}
